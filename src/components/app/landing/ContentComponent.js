import React, { Component } from 'react'
import { Segment, Button, Icon, Grid, Modal, Header, Input } from 'semantic-ui-react'
import DropComponent from './DropComponent'
import LoadingComponent from './LoadingComponent'
import ResultsComponent from '../results/ResultsComponent'
import DataProcessingService from '../../../services/DataProcessingService'
import html2canvas from 'html2canvas'
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";
pdfMake.vfs = pdfFonts.pdfMake.vfs;

export class ContentComponent extends Component {
    constructor() {
        super()

        this.state = {
            processing: false,
            results: false,
            data: null,
            filename: 'Results',
            downloadModal: false,
            saveModal: false
        }

        this.retrieveResults = this.retrieveResults.bind(this)
        this.download = this.download.bind(this)
    }

    retrieveResults(dataset) {
        this.setState({processing: true})
        DataProcessingService.analyzeSpectrum(dataset)
        .then( res => {
            this.setState({
                processing: false,
                results: true,
                data: res.data.body})
        })
        .catch(err => console.log(err))
    }

    save(name) {
        DataProcessingService.saveInDatabse(this.state.data, name)
        this.setState({saveModal: false})
    }

    download() {
        const input = document.getElementById('download')
        const filename = this.state.filename
        html2canvas(input, {y: 350}).then(canvas => {
            const data = canvas.toDataURL();
            const docDefinition = {
                header: filename,
                pageSize: 'A4',
                content: [{
                    image: data,
                    width: 500
                }],
                footer: 'Generated by https://jakubowski1005.github.io/know-your-protein-client/'
            }
            pdfMake.createPdf(docDefinition).download(`${filename}.pdf`);
        })
        this.setState({downloadModal: false})
    }

    handleChange = (e, { name, value }) => this.setState({ [name]: value })
    handleDownloadModalOpen = () => this.setState({downloadModal: true})
    handleDownloadModalClose = () => this.setState({downloadModal: false})
    handleSaveModalOpen = () => this.setState({saveModal: true})
    handleSaveModalClose = () => this.setState({saveModal: false})

    render() {
        return (
            <Segment placeholder style={{width: '60%', minWidth: '220mm'}}>
                {!this.state.processing && !this.state.results && <DropComponent process={this.retrieveResults} />}
                {this.state.processing && <LoadingComponent />}
                {this.state.results && <div id='download' ><ResultsComponent data={this.state.data} /></div>}
                {this.state.results && 
                <Grid columns='equal' style={{paddingTop: '40px'}}>
                    <Grid.Column>
                        <Modal
                            trigger={<Button color='red' size='large' onClick={this.handleDownloadModalOpen}><Icon name='download' />Download as PDF</Button>}
                            open={this.state.downloadModal}
                            onClose={this.handleDownloadModalClose}
                            basic
                            size='small'>
                            <Header icon='download' content='Download as PDF' />
                            <Modal.Content>
                                <Input fluid placeholder='Enter name of your file' name='filename' onChange={this.handleChange} />
                            </Modal.Content>
                            <Modal.Actions>
                                <Button color='green' onClick={this.download} inverted>Save</Button>
                                <Button color='red' inverted onClick={this.handleDownloadModalClose}>Cancel</Button>
                            </Modal.Actions>
                        </Modal>
                    </Grid.Column>
                    <Grid.Column>
                        <Modal
                            trigger={<Button color='red' size='large' onClick={this.handleSaveModalOpen}><Icon name='save' />Save in database</Button>}
                            open={this.state.saveModal}
                            onClose={this.handleSaveModalClose}
                            basic
                            size='small'>
                            <Header icon='save' content='Save in database' />
                            <Modal.Content>
                                <Input fluid placeholder='Enter name of your file' name='filename' onChange={this.handleChange} />
                            </Modal.Content>
                            <Modal.Actions>
                                <Button color='green' onClick={this.save} inverted>Save</Button>
                                <Button color='red' inverted onClick={this.handleSaveModalClose}>Cancel</Button>
                            </Modal.Actions>
                        </Modal>
                    </Grid.Column>
                </Grid>}
            </Segment>
        )
    }
}

export default ContentComponent